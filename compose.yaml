version: '3.9'

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  # server:
  #   build:
  #     context: .
  #   environment:
  #     NODE_ENV: "{NODE_ENV}"
  #   ports:
  #     - 3001:3001
  #   # `depends_on` tells Docker Compose to start the database before your application.
  #   depends_on:
  #     db:
  #       condition: service_healthy
  

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
 
  pg_database:
    container_name: yni_postgres
    image: 'postgres:latest'
    ports:
      - 5432:5432   
    restart: always
    user: "${POSTGRES_USER}"
    env_file:
      - path: .env
        required: true
    volumes:
      - pg_database-data:/var/lib/postgresql/data
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 30s
      retries: 5
volumes:
  pg_database-data: